---
title: 'test'
format:
  html:
    df-print: paged
---

```{r}
#| output: false
library(tidyverse)
library(emmeans)
library(marginaleffects)
library(modelbased)
```

```{r}
## use the mtcars data, set up am as a factor
mc <- mtcars |> mutate(am = factor(am))
```

```{r}
## fit a linear model to mpg with wt x am interaction
m <- lm(mpg ~ wt * am, data = mc)

summary(m)
```

## 1. means/counterfactuals for each level of am at mean wt

```{r}
emmeans(m, specs = 'am')
```

```{r}
estimate_means(m, by = 'am')
```

```{r}
avg_predictions(m, variables = 'am')
```

## 2. means/counterfactuals for each level of am at wt = 2.5, 3, 3.5

```{r}
emmeans(m, specs = c('am', 'wt'), at = list(wt = c(2.5, 3, 3.5)))
```

```{r}
estimate_means(m, by = c('am', 'wt = [2.5, 3, 3.5]'))
```

```{r}
avg_predictions(m, variables = list(am = unique, wt = c(2.5, 3, 3.5)))
```

## 3. means/counterfactuals for wt = 2.5, 3, 3.5, averaged over levels of am

```{r}
emmeans(m, 'wt', at = list(wt = c(2.5, 3, 3.5)))
```

```{r}
estimate_means(m, by = c('wt = [2.5, 3, 3.5]'))
```

```{r}
avg_predictions(m, variables = list(wt = c(2.5, 3, 3.5)))
```

## 4. graphical version of 2

```{r}
emmip(m, am ~ wt, at = list(wt = c(2.5, 3, 3.5)), CIs = TRUE)
```

```{r}
estimate_means(m, by = c('wt', 'am')) %>% plot()
```

```{r}
plot_predictions(m, condition = c('wt', 'am'))
```

## 5. compare levels of am at specific values of wt

```{r}
pairs(emmeans(m, 'am', by = 'wt', at = list(wt = c(2.5, 3, 3.5))))
```

```{r}
estimate_contrasts(m, contrast = 'am', by = c('wt = [2.5, 3, 3.5]'))
```

```{r}
comparisons(m, variables = "am", newdata = datagrid(wt = c(2.5, 3, 3.5)))
```

## 6. plot of pairswise comparisons

```{r}
plot(pairs(emmeans(m, specs = 'am', by = 'wt', at = list(wt = c(2.5, 3, 3.5)))))
```

```{r}
estimate_contrasts(m, contrast = 'am', by = c('wt = [2.5, 3, 3.5]'))
```

```{r}
plot_comparisons(m, variables = 'am', condition = list(wt = c(2.5, 3, 3.5)))
```

## 7. slope of wt for each level of am

```{r}
emtrends(m, specs = 'am', var = 'wt')
```

```{r}
estimate_slopes(m, trend = 'wt', by = 'am')
```

```{r}
slopes(m, variables = 'wt', by = 'am')
```
